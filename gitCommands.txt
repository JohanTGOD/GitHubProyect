Cuando se abre un arhivo en vim para salir hay que realizar:
    shif zz

¿git config --list? es para saber la configuracion de mi git
¿git show? Mostrara todos los cambios echos,quien los hizo, que lineas han cambiado
            por debajo esto realiza un git diff con los tags de los comits para poder ver los cambios
            pero sin la informacion de el dia,el correo y de la persona quien la hizo
¿git log? git log <nombreDelArchivo> para ver la historia completa del file
¿git mv? es super importante para cambiar el nombre o la ruta de files ya traqueados
            git mv <oldName> <newName>
                    por debajo lo que haria seria
                        mv <oldname> <newname>
                        git add newname
                        git rm --cache oldname
¿git diff?
            Es util para comparar las versiones de lo commits o de los archivos
            git diff jfhdsjkdf87f9s fsdjkfhjksdf899
                los numero raros de arriba son los ids de los commits que lo puedo ver con git log
                El orden es colocar primero el ID viejo y Despues el ID nuevo
            Aparte tiene una funcionalidad para poder identificar los cambios que se le realizen a un mismo archivo en diferentes etapas
            es decir tengo un archiov llamado hola en stg pero le hago cambios a ese archivo por lo que ahora tengo entre commillas dos archivos
            uno hola en stg y otro en el directori llamado hola
            si hago un git diff
                sin los ids de los commits 
                podre ver los cambios que se le realizaron a ese archivo                            

¿git reset?
            Nos permite volver a una version anterio
                hard: todo vuelve a la version anterior y borramos
                    Tengo que tomar el id del comit al que quiero regresar
                    Cuando haga esto los id que estuviera por delante se van a borrar de la base de datos de git
                    git reset 4d5sa4d56a465fas --hard
                soft: vuelve a la version anterior pero no borra lo que esta en el stagin area osea despues de hacer el git add .

git fetch:
    Actualiza lo que hay en repositorio local con lo que hay en el repositorio remoto, sin ver los cambios en el directorio

git pull: Realiza un git fetch y un git merge para tener la informacion actualizada tanto en el directorio como el repositorio local


git commit -am: Es util con archivos ya trackeados, si el archivo es nuevo lo recomendable es git add . y luego git commit
git remote -v: para ver la url del repositorio ya sea https o ssh



git log --all --graph --decorate --oneline = para ver de forma grafica el proceso del proyecto

git tag -a v0.1 -m "<message>" <commit>
para enviar el tag a Github se hace con el comando  
    git push origin --tags

gitk = will show something as sourcetree, it will work in git bash

git fork: Funciona como un git clone, pero funciona mas que todo para realizar contribuciones
            a un proyecto,puedo tener dos repositoros de github con el mismo proyecto.
            A diferencia de tener un solo repositorio en github.
            
            para mantener actualizada el proyecto fork con el principal se podria realizar
            una configuracion de fuente la cual llamaremos upstream asi como hay un 
            origin

            esta se agregara con el comando
                git remote add upstream <url del proyecto>
                        el upstream es el nombre que comumente se le da pero se puede cambiar

            asi de esa manera para tener actualizado el proyecto fork con el proyecto principal
            de github,en vez de colocar git pull origin master
            para hacer referencia al proyecto principal de github
            se le hara git pull upstream master 


            Normalmente se actualizara haciendo pull de upstream pero se subiran tus cambios
            a traves del origin para despues poder lanzar el PR

git rebase
        Es una mala practica usarlo en repositorio remotos, hazlo en repositorio local
        Es como un merge pero lo que cambia es la historia de como se vieron afectados los cambios
        Reescirbir la historia del repositorio               

git stash 
        Es util cuando deseo tener en TEMPORAL los cambios que hago a los archivos
            ejemplo: estoy en la rama master, hice unos cambios, pero me necesito cambiar de rama o de commit,
                        pero como aun no he terminado la idea que he modificado no deseo hacer un comit
                        por lo que realizo un git stash para que guarde esos cambios temporalmente y despues continuar trabajando desde ese punto

    git stash save <“mensaje">
    git stash drop
    git stash drop stash@{<num_stash>}
        me elimina un stash en especifico

    git stash clear
        me borrar toda la lista del stash

    git stash list
        para ver las listas de stash que tengo

    git checkout stash -b <Nombre de rama>
        para crear una rama con los cambios del ULTIMO STASH QUE PUSE y de una ves pasarme a esa rama                        
                        


 git clean --dry-run
 git clean -f
    Esto es para eliminar los archivos que aun no se han traqueado
    en el orden que coloque arriba

    pst hay que tener cuidado con el git ignore porque puede que no limpie un archivo debido a esto


git cherry-pick 
    Es usado cuando me quiero traer un commit de una rama(b) a mi rama (a)
    ojo solo el commit y no todos los cambios de la rama(b)
    es una mala practica
    Esto cambia la historia de git porque simula como si el cambio hubiera sido en la rama a cuando en verdad fue en la rama base
    una de las cosas mas importantes de git es mantener su historia
    